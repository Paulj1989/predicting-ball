name: Weekly Model Update

on:
  schedule:
    - cron: '0 9 * * 1'  # Every Monday at 9:00 UTC
  workflow_dispatch:
    inputs:
      force_tune:
        description: 'Force hyperparameter tuning'
        type: boolean
        default: false

permissions:
  contents: write
  issues: write

jobs:
  update-model:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
      
      - name: Install dependencies
        run: |
          uv pip install --system -r requirements.txt
          uv pip install --system boto3
      
      - name: Download DuckDB from DO Spaces
        env:
          DO_SPACES_KEY: ${{ secrets.DO_SPACES_KEY }}
          DO_SPACES_SECRET: ${{ secrets.DO_SPACES_SECRET }}
          DO_SPACE_NAME: ${{ secrets.DO_SPACE_NAME }}
          DO_SPACE_REGION: ${{ secrets.DO_SPACE_REGION }}
        run: python scripts/automation/download_database.py
      
      - name: Fetch latest data and update database
        env:
          ODDS_API_KEY: ${{ secrets.ODDS_API_KEY }}
        run: python scripts/automation/fetch_and_update_db.py
      
      - name: Determine if hyperparameter tuning needed
        id: check_tuning
        run: |
          DAY_OF_MONTH=$(date +%d)
          if [ "$DAY_OF_MONTH" -le 7 ] || [ "${{ inputs.force_tune }}" = "true" ]; then
            echo "tune=true" >> $GITHUB_OUTPUT
            echo "First week of month or forced - will run hyperparameter tuning"
          else
            echo "tune=false" >> $GITHUB_OUTPUT
            echo "Regular week - fast training only"
          fi
      
      - name: Train model
        run: |
          if [ "${{ steps.check_tuning.outputs.tune }}" = "true" ]; then
            python scripts/modeling/train_model.py --tune
          else
            python scripts/modeling/train_model.py
          fi
      
      - name: Run calibration
        run: |
          python scripts/modeling/run_calibration.py \
            --model-path outputs/models/production_model.pkl \
            --comprehensive
      
      - name: Generate predictions
        run: |
          python scripts/modeling/generate_predictions.py \
            --model-path outputs/models/production_model.pkl \
            --calibrator-path outputs/models/calibrators.pkl \
            --n-bootstrap 500 \
            --n-simulations 100000
      
      - name: Upload updated database to DO Spaces
        env:
          DO_SPACES_KEY: ${{ secrets.DO_SPACES_KEY }}
          DO_SPACES_SECRET: ${{ secrets.DO_SPACES_SECRET }}
          DO_SPACE_NAME: ${{ secrets.DO_SPACE_NAME }}
          DO_SPACE_REGION: ${{ secrets.DO_SPACE_REGION }}
        run: python scripts/automation/upload_database.py
      
      - name: Commit and push updates
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add outputs/
          git diff --staged --quiet || (git commit -m "chore: weekly update $(date +%Y-%m-%d)" && git push)
      
      - name: Create job summary
        if: always()
        run: |
          echo "## Weekly Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Date**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          [ -f outputs/models/production_model.pkl ] && echo "- Model trained" >> $GITHUB_STEP_SUMMARY
          [ -f outputs/predictions/next_fixtures.csv ] && echo "- Predictions generated" >> $GITHUB_STEP_SUMMARY
          [ -f outputs/predictions/season_projections.csv ] && echo "- Simulations complete" >> $GITHUB_STEP_SUMMARY
      
      - name: Create issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Weekly Update Failed - ${new Date().toLocaleDateString()}`,
              body: `Automated weekly update failed.\n\n**Run**: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              labels: ['automation', 'bug']
            })
